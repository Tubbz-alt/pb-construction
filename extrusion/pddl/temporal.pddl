(define (domain extrusion)
  (:requirements :equality :typing :durative-actions :numeric-fluents :derived-predicates
                 :conditional-effects :disjunctive-preconditions)
  (:predicates
    (Robot ?r)
    (Node ?n)
    (Element ?e)
    (Printed ?e)
    (Removed ?e)
    (Traj ?r ?t)
    (PrintAction ?r ?n1 ?e ?n2 ?q1 ?q2 ?t)
    (Collision ?t ?e)
    (Grounded ?n)
    (Direction ?n1 ?e ?n2)
    (Order ?e1 ?e2)
    (Stiff)
    (Conf ?r ?q)
    (AtConf ?r ?q)
    (CanMove ?r)
    (CFreeTrajConf ?r ?t ?r2 ?q2)
    (UnsafeTraj ?r ?t)
    (Idle ?r)
    (Executing ?r ?t)
  )
  (:functions
    (Distance ?t)
    (Speed)
  )

  (:durative-action print
   :parameters (?r ?n1 ?e ?n2 ?q1 ?q2 ?t)
   :duration (= ?duration 1) ; (= ?duration (/ (Distance ?t)  (Speed)))
   :condition (and
        (at start (PrintAction ?r ?n1 ?e ?n2 ?q1 ?q2 ?t))
        (at start (Printed ?e))
        (at start (Idle ?r))
        ;(at start (forall (?e2) (imply (Order ?e ?e2) (Removed ?e2))))
        ;(at start (forall (?e2) (imply (Collision ?t ?e2) (Removed ?e2))))
   )
   :effect (and
        (at start (not (Idle ?r)))
        (at start (not (Printed ?e)))
        (at start (Executing ?r ?t))
        (at start (not (AtConf ?r ?q1)))
        (at end (AtConf ?r ?q2))
        (at end (not (Executing ?r ?t)))
        (at end (Removed ?e))
        (at end (Idle ?r))
   )
  )

  ;(:derived (UnsafeTraj ?r1 ?t1)
  ;  (and (Robot ?r1) (exists (?r2) (and (Robot ?r2) (not (= ?r1 ?r2)) (or
  ;    (and (Traj ?t1) (OnTraj ?r2 ?t1))
  ;    (exists (?q2) (and (TrajConfCollision ?t1 ?q2)
  ;                       (AtConf ?r2 ?q2)))
  ;    (exists (?t2) (and (TrajTrajCollision ?t1 ?t2)
  ;                       (OnTraj ?r2 ?t2))))))))

)